generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // FlowForge specific
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  workspaceMembers WorkspaceMember[]
  projectMembers   ProjectMember[]
  tasks            Task[]
  comments         Comment[]
  activityLogs     ActivityLog[]
  createdWorkspaces Workspace[]      @relation("WorkspaceCreator")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// FlowForge Models
model Workspace {
  id          String   @id @default(cuid())
  name        String
  description String?
  slug        String   @unique
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  creatorId String
  creator   User   @relation("WorkspaceCreator", fields: [creatorId], references: [id], onDelete: Cascade)

  members      WorkspaceMember[]
  projects     Project[]
  activityLogs ActivityLog[]

  @@index([creatorId])
  @@index([slug])
}

model WorkspaceMember {
  id        String            @id @default(cuid())
  role      WorkspaceRole     @default(MEMBER)
  joinedAt  DateTime          @default(now())
  
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, workspaceId])
  @@index([userId])
  @@index([workspaceId])
}

enum WorkspaceRole {
  OWNER
  ADMIN
  MEMBER
  GUEST
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  color       String?       @default("#3b82f6")
  status      ProjectStatus @default(ACTIVE)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  members      ProjectMember[]
  tasks        Task[]
  columns      Column[]
  activityLogs ActivityLog[]

  @@index([workspaceId])
}

enum ProjectStatus {
  ACTIVE
  ARCHIVED
  COMPLETED
  ON_HOLD
}

model ProjectMember {
  id       String      @id @default(cuid())
  role     ProjectRole @default(MEMBER)
  joinedAt DateTime    @default(now())

  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@index([userId])
  @@index([projectId])
}

enum ProjectRole {
  ADMIN
  MEMBER
  VIEWER
}

model Column {
  id        String   @id @default(cuid())
  name      String
  order     Int
  color     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  tasks Task[]

  @@index([projectId])
}

model Task {
  id          String       @id @default(cuid())
  title       String
  description String?      @db.Text
  status      TaskStatus   @default(TODO)
  priority    TaskPriority @default(MEDIUM)
  order       Int
  dueDate     DateTime?
  startDate   DateTime?
  completedAt DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  columnId String?
  column   Column? @relation(fields: [columnId], references: [id], onDelete: SetNull)

  assigneeId String?
  assignee   User?   @relation(fields: [assigneeId], references: [id], onDelete: SetNull)

  comments     Comment[]
  attachments  Attachment[]
  activityLogs ActivityLog[]
  timeEntries  TimeEntry[]

  @@index([projectId])
  @@index([columnId])
  @@index([assigneeId])
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
  BLOCKED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  taskId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([taskId])
}

model Attachment {
  id        String   @id @default(cuid())
  name      String
  url       String
  size      Int
  mimeType  String
  createdAt DateTime @default(now())

  taskId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId])
}

model TimeEntry {
  id          String    @id @default(cuid())
  description String?
  startTime   DateTime
  endTime     DateTime?
  duration    Int?      // in seconds
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  taskId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId])
}

model ActivityLog {
  id          String       @id @default(cuid())
  action      String
  entityType  String       // "task", "project", "workspace"
  entityId    String
  description String?
  metadata    Json?
  createdAt   DateTime     @default(now())

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  workspaceId String?
  workspace   Workspace? @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  projectId String?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  taskId String?
  task   Task?   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([workspaceId])
  @@index([projectId])
  @@index([taskId])
  @@index([createdAt])
}
